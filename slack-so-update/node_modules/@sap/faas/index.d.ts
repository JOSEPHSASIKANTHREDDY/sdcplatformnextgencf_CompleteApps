
export namespace Faas {

    /**********************************************************************************
     * runtime data types
     **********************************************************************************/

    /**
     * The node js buffer class
     */
    interface Buffer extends Uint8Array {
    }

    /**
     * Json data, decoded representation
     */
    export type JsonData = Object | Array<any>;

    /**
     * The payload handled by cloud events, http requests and responses
     */
    export type Payload = Buffer | string | JsonData | null;

    /**********************************************************************************
     * @sap/ce : support cloud events
     **********************************************************************************/

    export class CloudEvent {

        /**
         * mandatory
         */
        specVersion: string;

        /**
         * mandatory
         */
        source: string;

        /**
         * mandatory
         */
        type: string;

        /**
         * mandatory
         */
        id: string;

        /**
         * optional
         */
        subject: string;

        /**
         * optional
         */
        time: Date;

        /**
         * optional
         */
        dataContentType: string;

        /**
         * optional
         */
        dataSchema: string;

        /**
         * optional
         */
        data: Payload;

        /**
         * optional
         */
        extensions: Object;

    }

    /**********************************************************************************
     * @sap/faas : handler, event and context
     **********************************************************************************/

    /**
     *
     */
    export class Event {

        /**
         * Authorization data
         */
        auth: Authorization;

        /**
         * Cloud event if defined
         */
        ce: CloudEvent;

        /**
         * Event data, payload depends on mime type
         */
        data: Payload;

        /**
         * Decodes credentials as user and password
         */
        decodeBasicAuth(): BasicAuth;

        /**
         * Decodes credentials as JsonWebToken
         */
        decodeJsonWebToken(): JsonWebToken;

        /**
         *  Sets event status to 'bad request', data are invalid or inconsistent
         */
        setBadRequest(info?: string): void

        /**
         *  Sets event status to 'unauthorized', missing or invalid credentials
         */
        setUnauthorized(info?: string): void

        /**
         * Provides the content type, either form cloud event or from request
         */
        getContentType(): string;

        /**
         * Defines the response type explicitly
         */
        setResponseType(string): void;

        /**
         * Provides a response stream, its end will also finish processing
         */
        getResponseStream(string): WritableStream;

        /**
         * Sends a cloud event as response and ends response processing, function handler will return undefined value
         * @param CloudEvent
         */
        sendResponseEvent(CloudEvent): void

    }

    /**
     * Context offered by runtime "nodejs8", secret and config methods to call synchronously
     */
    export class ContextSync {

        /**
         * The function name this context is assigned to
         */
        funcName: string;

        /**
         * The allowed time to execute the function (in milliseconds)
         */
        timeoutMS: number;

        /**
         * Read service key
         */
        getServiceCredentials(alias: string): Buffer;

        /**
         * Read service key as string
         */
        getServiceCredentialsString(alias: string): string;

        /**
         * Read service key as JSON
         */
        getServiceCredentialsJSON(alias: string): JsonData;

        /**
         * Read secret value map entry
         */
        getSecretValue(name: string, key: string): Buffer;

        /**
         * Read secret value map entry as string
         */
        getSecretValueString(name: string, key: string): string;

        /**
         * Read secret value map entry as JSON
         */
        getSecretValueJSON(name: string, key: string): JsonData;

        /**
         * Read secret value map entry as JSON
         */
        getSecretValueYAML(name: string, key: string): JsonData;

        /**
         * Get config value stream
         */
        getSecretValueStream(name: string, key: string): ReadableStream;

        /**
         * Read config map value map entry
         */
        getConfigValue(name: string, key: string): Buffer;

        /**
         * Read config value map entry as string
         */
        getConfigValueString(name: string, key: string): string;

        /**
         * Read config value map entry as JSON
         */
        getConfigValueJSON(name: string, key: string): JsonData;

        /**
         * Read config value map entry as JSON
         */
        getConfigValueYAML(name: string, key: string): JsonData;

        /**
         * Get config value stream
         */
        getConfigValueStream(name: string, key: string): ReadableStream;

        /**
         * Call another function in current scope, callback or returned promise can be used, both provide received content
         */
        callFunction(name: string, content: Content, callback?: ContentHandler): Promise<Content>;

    }

    /**
     * Context offered as of runtime "nodejs10", fully async API
     */
    export class Context {

        /**
         * The function name this context is assigned to
         */
        funcName: string;

        /**
         * The allowed time to execute the function (in milliseconds)
         */
        timeoutMS: number;

        /**
         * Read service key
         */
        getServiceCredentials(alias: string): Promise<Buffer>;

        /**
         * Read service key as string
         */
        getServiceCredentialsString(alias: string): Promise<string>;

        /**
         * Read service key as JSON
         */
        getServiceCredentialsJSON(alias: string): Promise<JsonData>;

        /**
         * Read secret value map entry
         */
        getSecretValue(name: string, key: string): Promise<Buffer>;

        /**
         * Read secret value map entry as string
         */
        getSecretValueString(name: string, key: string): Promise<string>;

        /**
         * Read secret value map entry as JSON
         */
        getSecretValueJSON(name: string, key: string): Promise<JsonData>;

        /**
         * Read secret value map entry as JSON
         */
        getSecretValueYAML(name: string, key: string): Promise<JsonData>;

        /**
         * Get config value stream
         */
        getSecretValueStream(name: string, key: string): Promise<ReadableStream<Buffer>>;

        /**
         * Read config map value map entry
         */
        getConfigValue(name: string, key: string): Promise<Buffer>;

        /**
         * Read config value map entry as string
         */
        getConfigValueString(name: string, key: string): Promise<string>;

        /**
         * Read config value map entry as JSON
         */
        getConfigValueJSON(name: string, key: string): Promise<JsonData>;

        /**
         * Read config value map entry as JSON
         */
        getConfigValueYAML(name: string, key: string): Promise<JsonData>;

        /**
         * Get config value stream
         */
        getConfigValueStream(name: string, key: string): Promise<ReadableStream<Buffer>>;

        /**
         * Call another function in current scope, callback or returned promise can be used, both provide received content
         */
        callFunction(name: string, content: Content, callback?: ContentHandler): Promise<Content>;

    }

    /**
     *
     */
    export class Authorization {

        /**
         *
         */
        type: string;

        /**
         *
         */
        credentials: string;

    }

    /**
     *
     */
    export class BasicAuth {

        /**
         *
         */
        user: string;

        /**
         *
         */
        password: string;

    }

    /**
     *
     */
    export class JsonWebToken {

        /**
         *
         */
        header: Object;

        /**
         *
         */
        payload: Object;

        /**
         *
         */
        signature: string;

    }

    /**
     *
     */
    export interface Content {

        /**
         * Content type of the payload
         */
        type?: string;

        /**
         * Content data, payload depends on mime type
         */
        data?: Payload;

    }

    /**
     * A callback to receive content, e.g. from a function call
     */
    export type ContentHandler = (err?: Error, content?: Content) => void;

    /**
     * The function handler is called for each function invocation.
     * Parameter Event provides data of the current call
     * Parameter Context provides data and methods related to the running process (k8s pod)
     */
    export type FunctionHandler = (event: Event, context: Context) => Payload | Promise<Payload>;

    /**
     * A Module may provide one single function handler directly, the typical case.
     * Alternatively, the module may export one object behaving like a handler map,
     * Object<string, FunctionHandler>.
     */
    export type FunctionHandlerCollection = Object;

    /**
     *
     */
    export class TestOptions {

        /**
         * Optional, provides the project folder relative to current unit test file
         */
        "project-folder": string;

        /**
         * Optional, allows to filter the function name if multiple functions are defined by project
         */
        "function-name": string;

        /**
         * Optional, deploy values to use, file path relative to current unit test file
         */
        "deploy-values": string;

    }

    /**
     * Callback provided by test framework of choice, notify of test completed
     */
    export type TestDone = (error: undefined|null|Error) => void;

    /**
     * The test function to be executed
     */
    export type TestExec = (context: Context) => Promise<void>;

    /**
     * Starts a local faas server based on the given configuration, executes the (async) test method, closes the server.
     */
    export function test(done: TestDone, options: TestOptions, execute: TestExec);

}
