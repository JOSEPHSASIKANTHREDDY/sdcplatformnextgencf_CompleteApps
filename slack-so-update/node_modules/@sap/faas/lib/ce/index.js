'use strict';

const mime = require('content-type');
const {readJsonFormat} = require('./types');
const v01 = require('./v01');
const v02 = require('./v02');
const v03 = require('./v03');
const v10 = require('./v10');
const {EC, ErrMsg} = require('../errors');

// noinspection JSUnusedGlobalSymbols
module.exports = {
    encodeHttp,
    encodeJson,
    decodeHttp,
    decodeJson,
};

/**
 * @param {CloudEvent} ce
 * @return {Buffer}
 */
function encodeJson(ce) {
    switch(ce.specVersion) {
        case '' || undefined:
            ce.specVersion = '1.0';
            return v10.encodeJsonFormat(ce);
        case '1.0':
            return v10.encodeJsonFormat(ce);
        case '0.3':
            return v03.encodeJsonFormat(ce);
        case '0.2':
            return v02.encodeJsonFormat(ce);
        case '0.1':
            return v01.encodeJsonFormat(ce);
        default:
            throw ErrMsg(EC.CE_INVALID_VERSION, ce.specVersion);
    }
}

/**
 * @param {CloudEvent} ce
 * @return {{headers: {}, payload: Buffer}}
 */
function encodeHttp(ce) {
    switch(ce.specVersion) {
        case '' || undefined:
            ce.specVersion = '1.0';
            return v10.encodeHttpBinary(ce);
        case '1.0':
            return v10.encodeHttpBinary(ce);
        case '0.3':
            return v03.encodeHttpBinary(ce);
        case '0.2':
            return v02.encodeHttpBinary(ce);
        case '0.1':
            return v01.encodeHttpBinary(ce);
        default:
            throw ErrMsg(EC.CE_INVALID_VERSION, ce.specVersion);
    }
}

/**
 * @param {Payload} payload
 * @return {CloudEvent}
 */
function decodeJson(payload) {
    const pa = readJsonFormat(payload);
    const sv = pa['specversion'];
    if (typeof sv === 'string') {
        if (sv === '1.0')
            return v10.decodeJsonFormat(pa);
        if (sv === '0.3')
            return v03.decodeJsonFormat(pa);
        if (sv === '0.2')
            return v02.decodeJsonFormat(pa);
        throw ErrMsg(EC.CE_INVALID_VERSION, sv);
    }
    const cv = pa['cloudEventsVersion'];
    if (typeof cv === 'string') {
        if (cv === '0.1')
            return v01.decodeJsonFormat(pa);
        throw ErrMsg(EC.CE_INVALID_VERSION, cv);
    }
    throw ErrMsg(EC.CE_INVALID_FORMAT);
}

/**
 * @param {{}} headers
 * @param {Payload} payload
 * @return {CloudEvent}
 */
function decodeHttp(headers, payload) {
    const ct = headers['content-type'];
    const mt = ct ? mime.parse(ct).type : '';

    switch (mt) {
        case 'application/cloudevents+json': {
            return decodeJson(payload);
        }
        default: {
            const sv = headers['ce-specversion'];
            if (sv) {
                if (sv === '1.0')
                    return v10.decodeHttpBinary(headers, payload);
                if (sv === '0.3')
                    return v03.decodeHttpBinary(headers, payload);
                if (sv === '0.2')
                    return v02.decodeHttpBinary(headers, payload);
                throw ErrMsg(EC.CE_INVALID_VERSION, sv);
            }
            const cv = headers['ce-cloudeventsversion'];
            if (cv) {
                if (cv === '0.1')
                    return v01.decodeHttpBinary(headers, payload);
                throw ErrMsg(EC.CE_INVALID_VERSION, cv);
            }
        }
    }
    return null;
}

