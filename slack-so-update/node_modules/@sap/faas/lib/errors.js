'use strict';

const util = require('util');
const pkg = require('../package.json');

const EC = Object.freeze({

    PATH_INVALID         : '[101] path not valid \'%s\'',
    FILE_NOT_FOUND       : '[102] file not found \'%s\'',
    FILE_NOT_VALID       : '[103] file not valid \'%s\', %s',

    SKIP_FILE_TOO_BIG    : '[104] %s \'%s\' file \'%s\' skipped, size in total %d bytes',
    SKIP_FILE_VAL_READ   : '[105] %s \'%s\' file \'%s\' skipped, read access error',
    SKIP_FILE_VAL_SIZE   : '[106] %s \'%s\' file \'%s\' skipped, replacement size of %d bytes',
    SKIP_FILE_TYPE       : '[107] %s \'%s\' file \'%s\' skipped, file type \'%s\'',

    OBJ_NAME_BAD_TYPE    : '[150] %s name invalid, expected \'string\', but found \'%s\'',
    OBJ_NAME_INITIAL     : '[151] %s name invalid, expected valid name, but found \'\'',
    OBJ_NAME_TOO_LONG    : '[152] %s name \'%s\' invalid, expected up to %d chars, but found %d chars',
    OBJ_NAME_BAD_CHAR    : '[153] %s name \'%s\' invalid, found \'%s\' at position %d',
    KEY_NAME_TOO_LONG    : '[154] %s \'%s\' key \'%s\' invalid, expected up to %d chars, but found %d chars',
    KEY_NAME_BAD_CHAR    : '[155] %s \'%s\' key \'%s\' invalid, found \'%s\' at position %d',

    SKEY_VAL_BAD_TYPE    : '[180] service key \'%s\', field \'%s\' invalid, expected \'string\', but found \'%s\'',
    SKEY_VAL_BAD_CHAR    : '[180] service key \'%s\', field \'%s\' invalid, contains \'%s\' at position %d',

    DATA_NAME_INVALID    : '[201] %s name \'%s\' invalid',
    DATA_KEY_INVALID     : '[202] %s name \'%s\' key \'%s\' invalid',
    DATA_NOT_MOUNTED     : '[203] %s \'%s\' not assigned',
    DATA_LOAD_ERROR      : '[204] %s \'%s\' key \'%s\' load error, %s',
    SKEY_LOAD_ERROR      : '[205] service key \'%s\' load error, %s',

    RUNTIME_INVALID      : '[250] runtime \'%s\' is not supported, use [%s]',
    TRG_LIST_TYPE        : '[251] trigger collection expected as \'object\', but found \'%s\'',
    TRG_TYPE_INVALID     : '[252] trigger \'%s\', type \'%s\' not supported, use [%s]',

    LIBRARY_INVALID      : '[301] library path invalid, expected \'string\' or \'undefined\', but found \'%s\'',
    FUNC_LIST_INVALID    : '[302] function list expected as \'object\', but found \'%s\'',
    FUNC_UNDEFINED       : '[303] function \'%s\' not defined',
    MODULE_UNDEFINED     : '[304] function \'%s\' defined without module name',
    MODULE_INVALID       : '[305] function \'%s\' module file name expected as \'string\', but found \'%s\'',
    HANDLER_INVALID      : '[306] function \'%s\' handler name expected as \'string\', but found \'%s\'',
    TIMEOUT_INVALID      : '[307] function \'%s\' timeout expected as \'undefined\' or \'number\', but found \'%s\'',
    TIMEOUT_RANGE        : '[308] function \'%s\' timeout expected between \'%d\' and \'%d\', but found \'%d\'',
    MAX_BODY_INVALID     : '[306] function \'%s\' maxBody expected as \'string\', for example \'1MB\' or \'500KB\', but found \'%s\'',
    BINDING_INVALID      : '[309] function \'%s\' %s binding expected as \'undefined\' or \'Array\', but found \'%s\'',
    BINDING_UNRESOLVED   : '[310] function \'%s\' %s binding \'%s\' cannot be resolved',

    MODEXP_TYPE_MISMATCH : '[330] module \'%s\' exports \'%s\', but expected \'function\' or \'object\'',
    MODEXP_PROP_MISSING  : '[331] module \'%s\' exports object, but handler name not defined',
    MODEXP_PROP_MISMATCH : '[332] module \'%s\' exports handler \'%s\' as \'%s\', but expected \'function\'',
    PACKAGE_DEP_ERROR    : '[333] package.json, dependencies expected as \'undefined\' or \'object\', but found \'%s\'',
    BIND_DICT_ERROR      : '[334] %s definition, found \'%s\', but expected \'object\'',
    BIND_ITEM_ERROR      : '[335] %s entry \'%s\', found type \'%s\', but expected \'object\'',
    BIND_SOURCE_ERROR    : '[336] %s entry \'%s\', found source with type \'%s\', but expected \'string\'',
    BIND_SRC_DIR_ERROR   : '[337] %s entry \'%s\', source \'%s\' does not refer to directory',

    CE_INVALID_VERSION   : '[401] cloud event version \'%s\' not supported',
    CE_INVALID_FORMAT    : '[402] cloud event format invalid',
    CE_INVALID_VALUE     : '[403] cloud event field \'%s\' type \'%s\' with invalid value \'%s\', %s',
    CE_INVALID_DATA      : '[403] cloud event data, content type \'%s\' with invalid value of type \'%s\', %s',
    CE_INVALID_PAYLOAD   : '[405] cloud event payload invalid, \'%s\'',

    SCRIPT_LOAD_ERROR    : '[501] function load error, %s',
    SCRIPT_TIMEOUT       : '[502] function execution terminated, timeout after %d seconds',
    SCRIPT_BAD_RESULT    : '[503] function result type \'%s\' not supported',
    SCRIPT_NOT_ACCEPTED  : '[504] function result type \'%s\', not acceptable for request',
    SCRIPT_END_RESPONSE  : '[505] function result not \'undefined\', but response stream already closed (by function code)',
    SCRIPT_EVENT_REMOVE  : '[506] function misbehavior, tries to remove runtime event handler from response',

    CALL_CONTENT_INVALID : '[601] function \'%s\' call failed, invalid argument for \'%s\' using \'%s\'',
    CALL_POST_FAILED     : '[602] function \'%s\' call failed, unexpected status %d %s',

    METRICS_INCONSISTENT : '[999] metrics inconsistent, %s'

});

/**
 * @param {string} code
 * @param {...*} params
 * @return {!Error}
 * @private
 */
function ErrMsg(code, ...params) {
    return new Error(util.format(`${pkg.name} ${pkg.version} ${code}`, ...params));
}

/**
 * @param {string} code
 * @param {...*} params
 * @return {string}
 * @private
 */
function LogMsg(code, ...params) {
    // noinspection RegExpRedundantEscape
    return util.format(`${code}`, ...params).replace(/\[\d{3}\] /, '- ');
}

module.exports = {
    EC,
    ErrMsg,
    LogMsg
};
