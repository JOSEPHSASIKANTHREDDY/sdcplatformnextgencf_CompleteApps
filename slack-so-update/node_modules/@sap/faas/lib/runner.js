'use strict';

const fs = require('fs');
const pkg = require('../package');
const config = require('./runtime/config');
const server = require('./http/server');

const options = {
    'runtime-name'   : process.env.FAAS_RUNTIME_NAME    || runtime(),
    'service-map'    : process.env.FAAS_SERVICE_MAP     || ``,
    'service-folder' : process.env.FAAS_SERVICE_FOLDER  || `/faas/srv`,
    'secret-folder'  : process.env.FAAS_SECRET_FOLDER   || `/faas/sec`,
    'config-folder'  : process.env.FAAS_CONFIG_FOLDER   || `/faas/cfg`,
    'source-folder'  : process.env.FAAS_SOURCE_FOLDER   || `/faas/src`,
    'library-folder' : process.env.FAAS_LIBRARY_PATH    || `.`,                // always relative to source folder
    'function-name'  : process.env.FAAS_FUNCTION_NAME   || `fn${Date.now()}`,
    'module-file'    : process.env.FAAS_MODULE_FILE     || `index.js`,         // always relative to library folder
    'module-handler' : process.env.FAAS_MODULE_HANDLER  || ``,                 // only if module exports an object
    'enable-http-api': process.env.FAAS_ENABLE_HTTP_API === 'true',
    'runtime-domain' : process.env.FAAS_RUNTIME_DOMAIN  || `localhost`,
    'runtime-port'   : Number(process.env.FAAS_RUNTIME_PORT || 8080 ),
    'control-port'   : Number(process.env.FAAS_CONTROL_PORT || 8082 ),
    'timeout-seconds': Number(process.env.FAAS_TIMEOUT_SECONDS || 180 ),
    'body-byte-limit': process.env.FAAS_BODY_BYTE_LIMIT || '1MB'
};

for (const name of Object.keys(process.env)) {
    if (name.startsWith('FAAS_')) delete process.env[name];
}

try {
    const cfg = config.createRuntimeConfig(options);

    const reset = (by) => {
        cfg.fsCache.clear();
        console.log(`cache reset, ${by} changed`);
    };

    if (cfg.srvPath) {
        watch(cfg.srvPath, () => reset('service index'));
    }
    for (const [name, dir] of cfg.secDirs) {
        watch(dir, () => reset(`secret '${name}'`));
    }
    for (const [name, dir] of cfg.cfgDirs) {
        watch(dir, () => reset(`config '${name}'`));
    }

    server.listen(cfg, log, false);
} catch (e) {
    console.error(e.message);
    process.exit(1);
}

function log(fnName, error, simple) {
    console.error(simple ? error.message : error);
}

function watch(dir, notify) {
    fs.watch(dir, { persistent: false })
        .on('change', (event, file) => (file === '..data') ? notify() : undefined)
        .on('error', (error) => console.error(error))
    ;
}

function runtime() {
    console.log();
    switch(process.versions.node.split('.', 2)[0]) {
        case '8':
            return 'nodejs8';
        case '10':
            return 'nodejs10';
        default:
            return undefined;
    }
}
